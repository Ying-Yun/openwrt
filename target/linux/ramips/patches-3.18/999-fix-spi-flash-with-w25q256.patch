--- a/drivers/mtd/devices/m25p80.c
+++ b/drivers/mtd/devices/m25p80.c
@@ -321,7 +321,15 @@ static int m25p_probe(struct spi_device
 static int m25p_remove(struct spi_device *spi)
 {
 	struct m25p	*flash = spi_get_drvdata(spi);
-
+	if ((&flash->spi_nor)->addr_width > 3) {
+		printk(KERN_INFO "m25p80: exit 4-byte address mode\n");
+		flash->command[0] = SPINOR_OP_EX4B;  // exit 4-byte address mode: 0xe9
+		spi_write(flash->spi, flash->command, 1);
+		flash->command[0] = 0x66;  // enable reset
+		spi_write(flash->spi, flash->command, 1);
+		flash->command[0] = 0x99;  // reset
+		spi_write(flash->spi, flash->command, 1);
+	}
 	/* Clean up MTD stuff. */
 	return mtd_device_unregister(&flash->mtd);
 }
@@ -385,7 +393,7 @@ static struct spi_driver m25p80_driver =
 	.id_table	= m25p_ids,
 	.probe	= m25p_probe,
 	.remove	= m25p_remove,
-
+	.shutdown = m25p_remove,
 	/* REVISIT: many of these chips have deep power-down modes, which
 	 * should clearly be entered on suspend() to minimize power use.
 	 * And also when they're otherwise idle...
--- a/drivers/mtd/spi-nor/spi-nor.c
+++ b/drivers/mtd/spi-nor/spi-nor.c
@@ -635,7 +635,8 @@ static const struct spi_device_id spi_no
 	{ "w25q80", INFO(0xef5014, 0, 64 * 1024,  16, SECT_4K) },
 	{ "w25q80bl", INFO(0xef4014, 0, 64 * 1024,  16, SECT_4K) },
 	{ "w25q128", INFO(0xef4018, 0, 64 * 1024, 256, SECT_4K) },
-	{ "w25q256", INFO(0xef4019, 0, 64 * 1024, 512, SECT_4K) },
+	/*{ "w25q256", INFO(0xef4019, 0, 64 * 1024, 512, SECT_4K) },*/
+	{ "w25q256", INFO(0xef4019, 0, 64 * 1024, 256, SECT_4K) },
 
 	/* Catalyst / On Semiconductor -- non-JEDEC */
 	{ "cat25c11", CAT25_INFO(  16, 8, 16, 1, SPI_NOR_NO_ERASE | SPI_NOR_NO_FR) },
